<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqldiff PUBLIC "-//OpenMRS//DTD OpenMRS SQL Diff Config 1.0//EN" "http://resources.openmrs.org/doctype/sqldiff-1.0.dtd">

<sqldiff version="1.0">
	<help>
		USE:
			The diffs are ordered by data model version number.
			The script can be run in a top down fashion and is
			expected to not fail or overwrite old data
		
		EXPECT:
			- "use business-database-name;" was called prior to
			   calling this script
	</help>
	<diff>
		<version>1.0</version>
		<author>Nelson.Mahumane</author>
		<date>10 jun 2015</date>
		<description>Sql para criação de tabelas do modulo sms remider</description>
		<sql>
			CREATE TABLE IF NOT EXISTS `smsreminder_sent` (
			`sent_id` int(15) NOT NULL AUTO_INCREMENT,
			`cell_number` varchar(20) NOT NULL,
			`alert_date` date NOT NULL,
			`message` varchar(150) NOT NULL,
			`remain_days` int(7) NOT NULL,
			`patient_id` int(15) NOT NULL,
			`status` varchar(20) DEFAULT NULL,
			`uuid` char(38) NOT NULL,
			`created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
			PRIMARY KEY (`sent_id`),
			UNIQUE KEY `sent_uuid_index` (`uuid`),
			KEY `patient_pk` (`patient_id`),
			CONSTRAINT `patient_pk` FOREIGN KEY (`patient_id`) REFERENCES `patient` (`patient_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;

			<!-- CRIAÇÃO DE VIEWS PARA AUXILIAR NO FILTRO DE PACIENTES A NOTIFICAR-->

			<!-- Pacientes que iniciaram tarv em varias fontes de dados com datas diferentes-->

			CREATE OR REPLACE VIEW `paciente_inicio_tarv` AS
			select `p`.`patient_id` AS `patient_id`,min(`e`.`encounter_datetime`) AS `data_inicio`
			from ((`patient` `p`
			join `encounter` `e` on((`p`.`patient_id` = `e`.`patient_id`)))
			join `obs` `o` on((`o`.`encounter_id` = `e`.`encounter_id`)))
			where ((`e`.`voided` = 0)
			and (`o`.`voided` = 0)
			and (`p`.`voided` = 0)
			and (`e`.`encounter_type` in (18,6,9))
			and (`o`.`concept_id` = 1255)
			and (`o`.`value_coded` = 1256)
			and (`e`.`encounter_datetime` >= (select `global_property`.`property_value`
			from `global_property` where (`global_property`.`property` = 'smsreminder.reference_date')))
			and (`e`.`location_id` = (select cast(`global_property`.`property_value` as unsigned)
			from `global_property` where (`global_property`.`property` = 'smsreminder.us'))))
			group by `p`.`patient_id`
			union
			select `p`.`patient_id` AS `patient_id`,min(`o`.`value_datetime`) AS `data_inicio`
			from ((`patient` `p`
			join `encounter` `e` on((`p`.`patient_id` = `e`.`patient_id`)))
			join `obs` `o` on((`e`.`encounter_id` = `o`.`encounter_id`)))
			where ((`p`.`voided` = 0)
			and (`e`.`voided` = 0)
			and (`o`.`voided` = 0)
			and (`e`.`encounter_type` in (18,6,9))
			and (`o`.`concept_id` = 1190)
			and (`o`.`value_datetime` is not null)
			and (`o`.`value_datetime` >= (select `global_property`.`property_value`
			from `global_property` where (`global_property`.`property` = 'smsreminder.reference_date')))
			and (`e`.`location_id` = (select cast(`global_property`.`property_value` as unsigned)
			from `global_property` where (`global_property`.`property` = 'smsreminder.us'))))
			group by `p`.`patient_id`
			union
			select `pg`.`patient_id` AS `patient_id`,`pg`.`date_enrolled` AS `data_inicio`
			from (`patient` `p`
			join `patient_program` `pg` on((`p`.`patient_id` = `pg`.`patient_id`)))
			where ((`pg`.`voided` = 0)
			and (`p`.`voided` = 0)
			and (`pg`.`program_id` = 2)
			and (`pg`.`date_enrolled` >= (select `global_property`.`property_value`
			from `global_property` where (`global_property`.`property` = 'smsreminder.reference_date')))
			and (`pg`.`location_id` = (select cast(`global_property`.`property_value` as unsigned)
			from `global_property` where (`global_property`.`property` = 'smsreminder.us'))));

			<!--pacientes que iniciaram tarv na data menor das datas de varias fontes de dados-->

			CREATE OR REPLACE VIEW `paciente_novos_inscritos_tarv` AS
			select `paciente_inicio_tarv`.`patient_id` AS `patient_id`,min(`paciente_inicio_tarv`.`data_inicio`) AS `data_inicio`
			from `paciente_inicio_tarv`
			group by `paciente_inicio_tarv`.`patient_id`;

			<!--Pacientes que concordaram em ser contactados e indicaram o celular como meio de contacto -->
			CREATE OR REPLACE VIEW `paciente_permitem_contacto` AS
			select `patient`.`patient_id` AS `patient_id`,
			`encounter`.`encounter_datetime` AS `encounter_datetime`
			from `obs`
			join `encounter` on`obs`.`encounter_id` = `encounter`.`encounter_id`
			join `patient` on`encounter`.`patient_id` = `patient`.`patient_id`
			where `obs`.`concept_id` = 6309
			and `encounter`.`encounter_type` = 34
			and `encounter`.`voided`=0
			and `patient`.`voided`=0
			and `obs`.`value_coded` = 6307
			group by `patient`.`patient_id`
			UNION
			select `patient`.`patient_id` AS `patient_id`,
			max(`encounter`.`encounter_datetime`) AS `encounter_datetime`
			from `obs`
			join `encounter` on`obs`.`encounter_id` = `encounter`.`encounter_id`
			join `patient` on`encounter`.`patient_id` = `patient`.`patient_id`
			where  `encounter`.`encounter_type` = 35
			and `encounter`.`voided`=0
			and `patient`.`voided`=0
			and `obs`.`concept_id` = 6309
			and	`obs`.`value_coded` = 6307
			group by `patient`.`patient_id`;

			<!--PACIENTES QUE SÃO NOVOS INSCRITOS AO TARV A PARTIR DE UMA CERTA DATA E QUE CONSENTE CONTACTO PELO CELULAR-->
			CREATE OR REPLACE VIEW `novos_inscritos_permite_contacto` AS
			SELECT `paciente_novos_inscritos_tarv`.`patient_id` AS `patient_id`,`paciente_novos_inscritos_tarv`.`data_inicio` AS `data_inicio`
			FROM `paciente_novos_inscritos_tarv`
			JOIN `paciente_permitem_contacto` ON `paciente_permitem_contacto`.`patient_id`=`paciente_novos_inscritos_tarv`.`patient_id`;

			<!--ULTIMA  FILA -->
			CREATE OR REPLACE VIEW `max_frida` AS
			select `p`.`patient_id` AS `patient_id`,
			max(`e`.`encounter_datetime`) AS `encounter_datetime`,
			`e`.`encounter_type` AS `encounter_type`
			from (`patient` `p`
			join `encounter` `e` on((`e`.`patient_id` = `p`.`patient_id`)))
			where ((`p`.`voided` = 0)
			and (`e`.`voided` = 0)
			and (`e`.`encounter_type` = 18))
			group by `p`.`patient_id`;

			<!--PACIENTES QUE TEM PROXIMO LEVANTAMENTO QUE TEM CELULAR-->
			CREATE OR REPLACE VIEW `paciente_com_celular` AS
			select (to_days(`o`.`value_datetime`) - to_days(curdate())) AS `dias_remanescente`,
			`o`.`value_datetime` AS `proximo_visita`,
			`pid`.`identifier` AS `nid`,
			`pa`.`value` AS `telemovel`,
			CONCAT(ifnull(pn.given_name,''),' ',ifnull(pn.middle_name,''),' ',ifnull(pn.family_name,''))  AS nome_completo,
			`p`.`gender` AS sexo,
			`max_frida`.`patient_id` AS `patient_id`,
			`max_frida`.`encounter_type` AS `visita`,
			`max_frida`.`encounter_datetime` AS `ultima_visita`
			from (((((`max_frida`
			join `obs` `o`
			on((`o`.`person_id` = `max_frida`.`patient_id`)))
			join `person` `p` on((`p`.`person_id` = `max_frida`.`patient_id`)))
			join `person_attribute` `pa` on((`pa`.`person_id` = `max_frida`.`patient_id`)))
			join `patient_identifier` `pid` on((`pid`.`patient_id` = `max_frida`.`patient_id`)))
			join `person_name` `pn` on((`pn`.`person_id`=`max_frida`.`patient_id`)))
			where ((`o`.`concept_id` = 5096)
			and (`pa`.`person_attribute_type_id` = 9)
			and (`pa`.`value` is not null)
			and (`pa`.`voided` = 0)
			and (`pid`.`voided` = 0)
			and (NOT `pa`.`value` = '')
			and (`o`.`voided` = 0)
			and (`o`.`obs_datetime` = `max_frida`.`encounter_datetime`))
			GROUP BY `max_frida`.`patient_id`;

			<!--PACIENTES QUE VAO RECEBER SMS-->
			CREATE OR REPLACE  VIEW `notificacao_fila` AS
			select
			`paciente_com_celular`.`patient_id` AS `identificador`,
			`paciente_com_celular`.`nid` AS `nid`,
			`paciente_com_celular`.`nome_completo` AS `nome_completo`,
			`paciente_com_celular`.`sexo` AS `sexo`,
			`paciente_com_celular`.`telemovel` AS `telemovel`,
			`paciente_com_celular`.`visita` AS `tipo_visita`,
			`novos_inscritos_permite_contacto`.`data_inicio` AS `inicio_tarv`,
			`paciente_com_celular`.`ultima_visita` AS `ultima_visita`,
			`paciente_com_celular`.`proximo_visita` AS `proxima_visita`,
			`paciente_com_celular`.`dias_remanescente` AS `dias_remanescente`
			from (`paciente_com_celular`
			join `novos_inscritos_permite_contacto` on((`paciente_com_celular`.`patient_id` = `novos_inscritos_permite_contacto`.`patient_id`)));


			<!--INSERT NAS TABELAS PARA INICIALIZAÇÃO DOS DADOS -->


			INSERT INTO privilege(privilege,description,uuid) VALUES ('Edit Message','Editar Mensagem que é enviada para
			os pacientes no Modulo SMS Reminder', uuid());

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.port','COM17','Specifies the serial port wich will use to send',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.bandRate','115200','Specifies the rate of band',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.simPin','0000','Specifies the pin code from sim card',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.smscenter','+258860001130','Specifies the SMS center',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.message','tem um encontro','Specifies the SMS center',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.us','11','Specifies the location',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.reference_date',cast(CURRENT_DATE() AS CHAR(10)),'Specifies the date of new enrolled',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.remaindays','15,7,2','Specifies the days remain to next visit',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.modem','HUAWEI','Specifies the mark of modem',UUID(),NULL,NULL,NULL,NULL);

			INSERT INTO global_property
			(property, property_value, description, uuid, datatype, datatype_config, preferred_handler, handler_config)
			VALUES('smsreminder.model','E173','Specifies the model of modem',UUID(),NULL,NULL,NULL,NULL);

			insert into scheduler_task_config
			(name,description,schedulable_class,start_time,start_time_pattern,repeat_interval,start_on_startup,
			started,created_by,date_created,changed_by,date_changed,uuid,last_execution_time)
			value('SmsReminderTask','Enviar sms a paciente automaticamente mediante aos requisitos especificos',
			'org.openmrs.module.smsreminder.scheduler.SendSmsReminderTask','2016-05-24 09:00:00','MM/dd/yyyy HH:mm:ss',
			86400,0,0,1,current_date,null,null,uuid(), null);
			
			INSERT INTO global_property (property,property_value,description,uuid) 
			VALUES('smsreminder.his', '829091879,842375718', 'Mobile numbers on the HIS team receiving sms notifications',UUID());

        </sql>
	</diff>
</sqldiff>
